wine-quality-prediction/
.
├── Sample File Structure.ini                      # Placeholder for directory structure documentation
│
├── docker-compose.yml                             # Orchestrates all modules using Docker containers
│
├── data-preprocessing                             
│   ├── Data Preprocessing Dockerfile.dockerfile   # Dockerfile for preprocessing module
│   ├── preprocess.py                              # Python script for data cleaning
│   ├── preprocess_deployment.yaml                 # Handles app deployment
│   ├── preprocess_service.yaml                    # Handles networking
│   ├── pv-pvc.yaml                                # Manages storage
│   ├── preprocess_deployment.yaml                 # Kubernetes deployment config
│   ├── requirements.txt                           # Python dependencies
│   └── test_preprocess.py                         # Test script for preprocessing logic
│
├── model-inference                                # Parii's module - Loads model and predicts wine quality
│   ├── Dockerfile                                 # Dockerfile to containerize inference module
│   ├── inference.py                               # Python code: loads `saved_model.pkl` & runs predictions
│   ├── requirements.txt                           # Inference dependencies (e.g., flask, joblib, pandas)
│   └── test_inference.py                          # Unit test for inference logic
│
├── model-training                                 # Pravallika's module - Trains the prediction model
│   ├── Model Training Dockerfile.dockerfile       # Dockerfile for training module
│   ├── model-training-deployment.yaml             # Kubernetes deployment YAML for model training
│   ├── pv-pvc.yaml                                # Persistent Volume/Claim to store `saved_model.pkl`
│   ├── redundant                                  # (Deprecated config files – kept for backup)
│   │   ├── model-training-configmap.yaml          # ConfigMap for environment variables
│   │   ├── model-training-secrets.yaml            # Secrets for credentials
│   │   └── model-training-service.yaml            # Kubernetes service configuration
│   ├── requirements.txt                           # Training dependencies (e.g., sklearn, pandas)
│   ├── test_train_model.py                        # Unit test for model training logic
│   └── train_model.py                             # Python script: trains model & saves as `saved_model.pkl`
│
├── raw data                                      
│   └── wine_quality_assignment.csv                # Raw data used by the preprocessing module
│
├── user-interface                                 # Rio's module - UI for manual/CSV-based predictions
│   ├── Web Application Dockerfile.dockerfile      # Dockerfile for UI container
│   ├── assets
│   │   ├── css
│   │   │   └── style.css                          # CSS for styling the UI
│   │   └── js
│   │       └── script.js                          # JavaScript for UI interactivity
│   ├── requirements.txt                           # UI dependencies (e.g., Flask)
│   ├── templates
│   │   ├── index.html                             # Main dashboard (landing page)
│   │   ├── model_pred_csv.html                    # CSV-based predictions page
│   │   └── model_pred_manual.html                 # Manual input predictions page
│   └── winequality_app.py                         # Flask app to handle prediction requests & display results
│
└── volumes                                        # Shared directories for inter-module communication
    ├── data                                       # Preprocessed datasets
    │   ├── cleaned_wine_quality.csv               # Cleaned dataset → used for training
    │   ├── wine_quality.json                      # JSON format → used for analysis/API calls
    │
    ├── models                                    
    │   ├── saved_model.pkl                        # Final trained model file → used by inference module
    │
    └── user                                       
        ├── input.csv                              # User-uploaded data for prediction
        ├── cleaned_input.csv                      # Preprocessed version of `input.csv`
        └── predictions.csv                        # Prediction results returned by inference module